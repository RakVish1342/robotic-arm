#!/usr/bin/env python

import math
import rospy
from sensor_msgs.msg import Image, JointState
from std_msgs.msg import Float64
from simple_arm.srv import * # Imports 


class InitPosition(object):
    def __init__(self):
        rospy.init_node('init_position')

        self.safe_move = rospy.ServiceProxy('/arm_mover/safe_move', GoToPosition)
        self.j1_publisher = rospy.Publisher('/simple_arm/joint_1_position_controller/command',
                                    Float64, queue_size=10)
        self.j2_publisher = rospy.Publisher('/simple_arm/joint_2_position_controller/command',
                                    Float64, queue_size=10)        


        print ("CONSTCONSTCONSTCONSTCONST")
        pos_j1 = 1.0
        pos_j2 = 1.0
        self.j1_publisher.publish(pos_j1)
        self.j2_publisher.publish(pos_j2)
        # try:
        #     print ("INITIINTINTINTINTINTININITININTINTININTINTINITINTI")
        #     # rospy.wait_for_service('/arm_mover/safe_move')
        #     msg = GoToPositionRequest()
        #     msg.joint_1 = 0
        #     msg.joint_2 = 1.57
        #     response = self.safe_move(msg)
        #     rospy.loginfo("Arm's init position set:\n%s", 
        #                     response)

        # except rospy.ServiceException, e:
        #     rospy.logwarn("Service call failed: %s", e)

if __name__ == '__main__':
    try: 
        initPos = InitPosition()

        # try:
        #     # print ("INITIINTINTINTINTINTININITININTINTININTINTINITINTI")
        #     # rospy.wait_for_service('/arm_mover/safe_move')
        #     # msg = GoToPositionRequest()
        #     # msg.joint_1 = 1.57
        #     # msg.joint_2 = 1.57
        #     # # response = self.safe_move(msg)
        #     # response = initPos.safe_move(msg)
        #     # rospy.loginfo("Arm's init position set:\n%s", 
        #     #                 response)

        #     # pos_j1 = 1.0
        #     # pos_j2 = 1.0
        #     # initPos.j1_publisher.publish(pos_j1)
        #     # initPos.j2_publisher.publish(pos_j2)


        # except rospy.ServiceException, e:
        #     rospy.logwarn("Service call failed: %s", e)        
    except rospy.ROSInterruptException:
        pass
