#!/usr/bin/env python

import cv2
from geometry_msgs.msg import Pose # Same as Twist, Pose, Odom, Imu: https://answers.ros.org/question/216482/are-odom-pose-twist-and-imu-processed-differently-in-robot_localization/
import math
import rospy
import time
import csv
from sensor_msgs.msg import Image, JointState
from std_msgs.msg import Float64
from simple_arm.srv import *


class Reward(object):
    def __init__(self):
        rospy.init_node('bilinear_data',disable_signals = True)
        #print(">> Reward node initialized")

        self.subBoxLoc = rospy.Subscriber("/simple_arm/box_location", Pose, self.cbdata)
	self.currloc = rospy.Subscriber('/simple_arm/joint_states', JointState, self.cbcurrangle)
    	self.pub_j1 = rospy.Publisher('/simple_arm/joint_1_position_controller/command',Float64, queue_size=10)
    	self.pub_j2 = rospy.Publisher('/simple_arm/joint_2_position_controller/command', Float64, queue_size=10)
	self.currangle = 0
	self.j1angle = 0
	self.j2angle = 0
	self.boxLoc = (0, 0)

        #rospy.spin()
    
    def cbcurrangle(self,msg):
	self.j1angle = msg.position[0]
	self.j2angle = msg.position[1]

    def cbdata(self, msg):
        try:   
            self.boxLoc = (msg.position.x, msg.position.y)
        except rospy.ServiceException, e:
            rospy.logwarn("PID service failed: %s", e)
    
    def getdata(self):
	#time.sleep(5)
	csvfile =  open('/root/catkin_ws/src/robotic-arm/catkin_ws_py/src/simple_arm/scripts/bilineardata.csv','a+')
	field_names = ['x','dangle','x1']
	writer = csv.DictWriter(csvfile, fieldnames=field_names)
	writer.writeheader()
	rate = rospy.Rate(20)
	angle = 0
	counter = 0
	anglectr = 0
	angledel = 0.017
	dangler = angledel
	danglel = -angledel
        while not rospy.is_shutdown():
	   if(dangler>5*angledel):
		print(">> Testing done, Shutting Down")
		rospy.signal_shutdown('Shut Down')
	   prevpos = self.boxLoc[0]

	   if(self.boxLoc[0] < 999):
	     # Move left
	     if(counter%2 == 1):
		self.j1angle = self.j1angle + danglel
	     # Move right
	     elif(counter%2 == 0):
		self.j1angle = self.j1angle + dangler
	     self.pub_j1.publish(self.j1angle)
	     time.sleep(2)
	     if(counter%2 == 1):
   	     	writer.writerow({'x':prevpos,'x1':self.boxLoc[0],'dangle':danglel})
	     elif(counter%2 == 0):
		writer.writerow({'x':prevpos,'x1':self.boxLoc[0],'dangle':dangler})

	   if(self.boxLoc[0] == 999):
		# Change direction
	      	if(counter%2 == 1):
		    self.j1angle = self.j1angle + dangler
	      	elif(counter%2 == 0):
		    self.j1angle = self.j1angle + danglel
		self.pub_j1.publish(self.j1angle)
		counter+=1
		# Increment angle every 4 cycles
		if(counter%4==0):
		    danglel += -angledel
		    dangler += angledel
		time.sleep(2)
		#writer.writerow({'x':prevpos,'x1':self.boxLoc[0],'dangle':danglel})
		
	   rate.sleep()
	csvfile.close()

if __name__ == '__main__':
    try: 
        a = Reward()
	a.getdata()
    except rospy.ROSInterruptException:
        pass
