#!/usr/bin/env python

import cv2
from cv_bridge import CvBridge
from geometry_msgs.msg import Pose # Same as Twist, Pose, Odom, Imu: https://answers.ros.org/question/216482/are-odom-pose-twist-and-imu-processed-differently-in-robot_localization/
import math
import numpy as np
import rospy
from std_msgs.msg import Float64
from sensor_msgs.msg import Image, JointState
from simple_arm.srv import *


class BoxLocation(object):
    def __init__(self):
        rospy.init_node('box_location')

        self.subCamera = rospy.Subscriber("/rgb_camera/image_raw", Image, self.cbCamera)
        self.pubBoxLoc = rospy.Publisher('/simple_arm/box_location', Pose, queue_size=10)
        self.cvb = CvBridge()
        self.colorThresh = 210
        self.location = (999, 999)

        rospy.spin()

    def cbCamera(self, msg):
        try:
            rospy.loginfo(">>> Box Location")
            self.image = self.cvb.imgmsg_to_cv2(msg)
            # cv2.imwrite("/home/robond/tmp.jpg", self.image)
            r = self.image[:,:,0]
            sh = np.shape(r)
            # print(sh)
            count = 0
            xsum = 0
            ysum = 0
            bFound = 0
            for m in range( sh[0] ):
                for n in range( sh[1] ):
                    if(r[m,n] > self.colorThresh):
                        bFound = 1
                        xsum += n
                        ysum += m
                        count += 1
            if(bFound):                        
                self.location = (xsum/count, ysum/count)
            else:
                self.location = (999, 999)
            print (self.location)

            msgOut= Pose()
            msgOut.position.x = self.location[0]
            msgOut.position.y = self.location[1]
            self.pubBoxLoc.publish(msgOut)

        except rospy.ServiceException, e:
            rospy.logwarn("Box Location service failed: %s", e)


if __name__ == '__main__':
    try: 
        BoxLocation()
    except rospy.ROSInterruptException:
        pass
